# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/197FkN7A5SWdL8eRS1dPpnYEEC5LxgVJx
"""

import math
import time
import sys
import random
import platform
import getpass

# Conversion factors for mass and volume to base units (kg for mass, liters for volume)
unit_conversions = {
    'kg': 1,          # kilogram
    'g': 1 / 1000,    # gram
    'lb': 0.453592,   # pound
    'oz': 0.0283495,  # ounce
    'liter': 1,       # liter
    'ml': 1 / 1000,   # milliliter
}

def loading_animation(message="Processing", duration=3):
    """Simulate a loading animation in the command-line interface."""
    print(message, end="")
    for _ in range(duration):
        time.sleep(0.5)
        print(".", end="", flush=True)
    print(" Done!\n")

def display_system_info():
    """Display system information for a futuristic feel."""
    print("\n--- SYSTEM INFORMATION ---")
    print(f"Username: {getpass.getuser()}")
    print(f"System: {platform.system()} {platform.release()}")
    print(f"Machine: {platform.machine()}")
    print(f"Processor: {platform.processor()}")
    print(f"Python Version: {platform.python_version()}")
    print(f"Python Implementation: {platform.python_implementation()}")
    print(f"Python Build: {platform.python_build()}")
    print(f"Platform: {platform.platform()}")
    print("\n--- SYSTEM INITIALIZATION COMPLETE ---\n")

def simulate_server_connection():
    """Simulate connecting to a remote billing server."""
    loading_animation("Connecting to billing server", 5)
    print("Status: Connected to Billing Server v4.2.1\n")
    time.sleep(1)
    print("Initializing secure session...")
    time.sleep(1)
    loading_animation("Establishing encryption protocols", 4)
    print("Session Established. Ready to initiate billing.\n")

def convert_to_base_unit(quantity, from_unit):
    """Convert the quantity to the base unit (kg for mass, liter for volume)."""
    if from_unit in unit_conversions:
        conversion_factor = unit_conversions[from_unit]
        return quantity * conversion_factor
    else:
        print(f"Invalid unit {from_unit}. Please use a valid unit like kg, g, liter, ml.")
        return None

def get_customer_details():
    """Get customer details: Name, Phone Number, and Address."""
    print("Enter Customer Details")
    name = input("Customer Name: ")
    phone = input("Customer Phone Number: ")
    address = input("Customer Address: ")
    loading_animation("Validating customer information")
    return {"name": name, "phone": phone, "address": address}

def get_item_details():
    """Get item details: Name, Price, and Quantity."""
    print("\nAdd Item Details:")
    item_name = input("Enter the name of the item: ")
    price_per_unit = float(input(f"Enter the price per unit for {item_name} (in your currency): "))

    # Get the unit of measurement (kg, g, liter, pkg, etc.)
    unit = input(f"Enter the unit of measurement for {item_name} (kg, g, liter, pkg, etc.): ").lower()

    # If the unit is "pkg" (package), get additional weight/volume information
    if unit == 'pkg':
        weight_unit = input("Enter the weight unit for each package (kg/g): ").lower()
        weight_quantity = float(input(f"Enter the weight of one {item_name} package in {weight_unit}: "))

        # Convert the weight to grams or kg
        if weight_unit == "kg":
            weight_in_base_unit = weight_quantity * 1000  # Convert to grams
        elif weight_unit == "g":
            weight_in_base_unit = weight_quantity
        else:
            print("Unsupported weight unit. Please use 'kg' or 'g'.")
            return None

        price_per_base_unit = price_per_unit / weight_in_base_unit
    else:
        # Convert the price per unit directly to price per kg or liter
        price_per_base_unit = convert_to_base_unit(price_per_unit, unit)
        if price_per_base_unit is None:
            return None
        weight_in_base_unit = None

    quantity = float(input(f"Enter the quantity of {item_name} to purchase: "))
    return {
        "name": item_name,
        "price_per_unit": price_per_unit,
        "unit": unit,
        "quantity": quantity,
        "price_per_base_unit": price_per_base_unit,
        "weight_in_base_unit": weight_in_base_unit if unit == 'pkg' else None
    }

def display_progress_bar(duration=2):
    """Display a progress bar to simulate processing time."""
    print("Processing transaction:", end=" ")
    for i in range(20):
        time.sleep(duration / 20)
        print("â–ˆ", end="", flush=True)
    print("\n")

def generate_bill(customer_details, items):
    """Generate and display the bill."""
    print("\n\n--- BILL ---")
    print(f"Customer Name: {customer_details['name']}")
    print(f"Phone: {customer_details['phone']}")
    print(f"Address: {customer_details['address']}")
    print("\nItemized Bill:")

    total_cost = 0
    for item in items:
        item_total = item["quantity"] * item["price_per_base_unit"]
        total_cost += item_total
        if item['unit'] == 'pkg':
            print(f"{item['name']} - {item['quantity']} pkg (Each package weighs {item['weight_in_base_unit']} g) - "
                  f"Price per unit: {item['price_per_base_unit']:.2f} per kg, Total: {item_total:.2f}")
        else:
            print(f"{item['name']} - {item['quantity']} {item['unit']} - Price per unit: {item['price_per_base_unit']:.2f} per kg "
                  f"(converted), Total: {item_total:.2f}")

    # Optionally apply tax (e.g., 5% tax)
    tax = total_cost * 0.05
    grand_total = total_cost + tax
    print(f"\nTotal Cost: {total_cost:.2f}")
    print(f"Tax (5%): {tax:.2f}")
    print(f"Grand Total: {grand_total:.2f}")
    print("\n--- Transaction Complete ---\n")

def main():
    print("Billing Program - v3.7.9\n")
    display_system_info()
    simulate_server_connection()

    # Step 1: Get customer details
    customer_details = get_customer_details()

    # Step 2: Get item details one by one
    items = []
    while True:
        item = get_item_details()
        if item:
            items.append(item)

        # Ask if the user wants to add another item
        more_items = input("Would you like to add another item? (yes/no): ").strip().lower()
        if more_items != 'yes':
            break

    # Step 3: Generate and display the bill
    display_progress_bar()
    generate_bill(customer_details, items)

if __name__ == "__main__":
    main()